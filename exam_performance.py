# -*- coding: utf-8 -*-
"""exam_performance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13m0LgrH3wBO4S_mnjxUNolW1N_bPJFUP
"""

import numpy as np
def exam_performance():
  data = np.genfromtxt('student_exam_scores.csv',delimiter=",",skip_header=1) #genfromtext stands for generating array from the text file
# delimiter tells how the data much be seperated, skip_header =1 tells to skip the first line.
  average_hours_Studied = (data[:,1]) # here we are extracting that particular column via indexing
  sleephours= (data[:,2])
  attendence_percentage = (data[:,3])
  previous_score = (data[:,4])
  exam_score = (data[:,5])
  correation_hours = np.corrcoef(average_hours_Studied,exam_score)[0,1] # Here correlation checks that how much one variable is dependent on another, we always use [0,1] since we 2x2 matrix we use [0,1]
  correlation_sleep = np.corrcoef(sleephours,exam_score)[0,1]
  correlation_attendence = np.corrcoef(attendence_percentage,exam_score)[0,1]
  correlation_previous = np.corrcoef(previous_score,exam_score)[0,1]
  average_hours = np.mean(average_hours_Studied)
  average_attendences = np.mean(attendence_percentage)
  average_sleep = np.mean(sleephours)

  high_group_hours = average_hours_Studied >= average_hours
  low_group_hours = average_hours_Studied <= average_hours
  avg_of_high_hours = np.mean(exam_score[high_group_hours])
  avg_of_low_hours = np.mean(exam_score[low_group_hours])
  difference_hours = avg_of_high_hours - avg_of_low_hours

  high_group_sleep = sleephours >= average_sleep
  low_group_sleep = sleephours <= average_sleep
  high_sleep_avg = np.mean(exam_score[high_group_sleep])
  low_sleep_avg = np.mean(exam_score[low_group_sleep])
  difference_sleep = high_sleep_avg - low_sleep_avg

  high_group_attendence = attendence_percentage >= average_attendences
  low_group_attendence = attendence_percentage <= average_attendences
  avg_of_high = np.mean(exam_score[high_group_attendence])
  avg_of_low = np.mean(exam_score[low_group_attendence])
  difference = avg_of_high - avg_of_low


  summary = [
      ["Hours Studied",np.mean(average_hours_Studied),np.max(average_hours_Studied),np.min(average_hours_Studied),np.std(average_hours_Studied)],
      ["Sleep Hours",np.mean(sleephours),np.max(sleephours),np.min(sleephours),np.std(sleephours)],
      ["Attendence Percentage",np.mean(attendence_percentage),np.max(attendence_percentage),np.min(attendence_percentage),np.std(attendence_percentage)],
      ["Previous Scores",np.mean(previous_score),np.max(previous_score),np.min(previous_score),np.std(previous_score)],
      ["Exam Scores",np.mean(exam_score),np.max(exam_score),np.min(exam_score),np.std(exam_score)]
  ]
  correlation = [
      ["Hours Studied",correation_hours],
      ["Sleep Hours",correlation_sleep],
      ["Attendence Percentage",correlation_attendence],
      ["Previous Scores",correlation_previous]
  ]
  group_summary = [
  ['Hours Studied', avg_of_high_hours, avg_of_low_hours, difference_hours],
  ['Average Attendances', avg_of_high, avg_of_low, difference],
  ['Average Sleep', high_sleep_avg, low_sleep_avg, difference_sleep],
  ]

  grades = np.where(exam_score >=40,'A', # np.where is a conditional statement same like if-else statement
           np.where(exam_score >=35,'B',
           np.where(exam_score >=30,'C',
           np.where(exam_score >=25,'D','F'))))
  unique,count = np.unique(grades,return_counts=True)
  grade_count = np.column_stack((unique,count)) # This converts a individual arrays into a matrix
  total_students = len(exam_score)
  pass_count = np.count_nonzero(exam_score >= 35)
  fail_count = np.count_nonzero(exam_score < 35)
  pass_percent = (pass_count / total_students) * 100
  fail_percent = (fail_count / total_students) * 100

  print("Exam Performance Summary")
  print("-"*65)
  print(f"{'Variable':<25} {'Mean':<10} {'Max':<10} {'Min':<10} {'Std':<10}")
  print("-"*65)
  for row in summary:
      print(f"{row[0]:<25} {row[1]:<10.2f} {row[2]:<10.2f} {row[3]:<10.2f} {row[4]:<10.2f}")
  print("-"*65)
  print("Correlation Analysis")
  print("-"*65)
  for row in correlation:
      print(f"{row[0]:<25} {row[1]:<10.2f}")
  print("-"*65)
  print(f"{'Grade':<10} {'Count':<10}")
  print("-"*65)
  for row in grade_count:
       print(f"{row[0]:<10} {row[1]:<10}")
  print("-"*65)
  print("Group Performance Comparison")
  print("-"*65)

  print(f"{'Factor':<20} {'High Avg':<20} {'Low Avg':<20} {'Difference':<20}")
  print("-"*65)
  for row in group_summary:
    print(f"{row[0]:<20} {row[1]:<20.2f} {row[2]:<20.2f} {row[3]:<20.2f}")
  print("-"*65)
  print("Pass/Fail Summary")
  print("-"*65)
  print(f"Total Students: {total_students}")
  print(f"Passed: {pass_count} ({pass_percent:.2f}%)")
  print(f"Failed: {fail_count} ({fail_percent:.2f}%)")
  print("-"*65)

exam_performance()

import numpy as np
data = np.genfromtxt('student_exam_scores.csv',delimiter=",",skip_header=1)
with open('student_exam_scores.csv') as f:
    header = f.readline()
print(header)
exam_score = (data[:,5])
max(exam_score)

